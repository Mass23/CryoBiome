"""
Author: Susheel Bhanu BUSI
Affiliation: ESB group LCSB UniLU
Date: [2021-01-31]
Run: snakemake -s Snakefile --use-conda --cores 40 -rp
Latest modification:
"""

import glob

configfile:"config.yaml"
DATA_DIR=config['data_dir']
RESULTS_DIR=config['results_dir']
ENV_DIR=config['env_dir']
SRC_DIR=config['scripts_dir']
SAMPLES=[line.strip() for line in open("prokaryote_complete_accessions.txt", 'r')]    # if using a sample list instead of putting them in a config file
ASSEMBLY=[line.strip() for line in open("assembly_list.txt", 'r')]
# SAMPLES=SAMPLES=[line.strip() for line in open("sample_list", 'r')]	# used for TEST purposes
# ASSEMBLY=[line.strip() for line in open("ass_list", 'r')]		# used for TEST purposes

###########
rule all:
    input:
#        expand(os.path.join(DATA_DIR, "{sample}"), sample=SAMPLES),
        os.path.join(RESULTS_DIR, "gRodon/gRodon.installed"),
        expand(os.path.join(RESULTS_DIR, "prokka/{ass}.{type}"), ass=ASSEMBLY, type=["gff", "ffn"]),
#        expand(os.path.join(RESULTS_DIR, "prokka/{ass}_CDS_names.txt"), ass=ASSEMBLY)
        expand(os.path.join(RESULTS_DIR, "gRodon/{ass}_growth_prediction.txt"), ass=ASSEMBLY)

############################
# Download Genbank genomes #
############################
#rule genome_download:
#    output:
#        directory(os.path.join(DATA_DIR, "{sample}"))
#    log:
#        os.path.join("logs/download.{sample}.log")
#    conda:
#        os.path.join(ENV_DIR, "ncbi-genome-download.yaml")
#    message:
#        "Downloading FASTA, GFF and Protein-FASTA for {wildcards.sample}"
#    shell:
#        "(date && ncbi-genome-download -A {wildcards.sample} bacteria -s genbank --formats fasta,gff,protein-fasta --no-cache --verbose && date) &> {log}"

#################
# Initial Setup #
#################
rule install_gRodon:
    output:
        done=os.path.join(RESULTS_DIR, "gRodon/gRodon.installed")
    log:
        out=os.path.join("logs/setup.gRodon.log")
    conda:
        os.path.join(ENV_DIR, "gRodon.yaml")
    message:
        "Setup: install R-package gRodon"
    script:
        os.path.join(SRC_DIR, "install_gRodon.R")

##########
# Prokka #
##########
rule prokka:
    input:
        os.path.join(DATA_DIR, "{ass}_genomic.fna.gz")
    output:
        FA=os.path.join(RESULTS_DIR, "data/{ass}.fna"),
        GFF=os.path.join(RESULTS_DIR, "prokka/{ass}.gff"),
        FFN=os.path.join(RESULTS_DIR, "prokka/{ass}.ffn")
    log:
        "logs/prokka.{ass}.log"
#    wildcard_constraints:
#        sample=SAMPLES,
#        ass=ASSEMBLY
    threads:
        config['prokka']['threads']
    conda:
        os.path.join(ENV_DIR, "prokka.yaml")
    message:
        "Running Prokka on {wildcards.ass}"
    shell:
        "(date && zcat {input} > {output.FA} && "
        "export PATH={config[prokka][blast]}:$PATH && export PERL5LIB={config[prokka][path]} && "
        "prokka {output.FA} --outdir $(dirname {output.GFF}) --prefix $(basename {wildcards.ass}) --cpus {threads} --force && date) &> {log}"

#################
# Preprocessing #
#################
rule preprocess:
    input:
#        os.path.join(RESULTS_DIR, "prokka/{ass}.gff")
        rules.prokka.output.GFF
    output:
        os.path.join(RESULTS_DIR, "prokka/{ass}_CDS_names.txt")
    log:
        "logs/preprocess.{ass}.log"
    message:
        "Preprocessing GFFs from {wildcards.ass}"
    shell:
        """(date && sed -n '/##FASTA/q;p' {input} | awk '$3=="CDS"' | awk '{{print $9}}' | awk 'gsub(";.*","")' | awk 'gsub("ID=","")' > {output} && date) &> {log}"""

##################
# Running gRodon #
##################
rule gRodon:
    input:
#        FFN=os.path.join(RESULTS_DIR, "prokka/{ass}.ffn"),
        FFN=rules.prokka.output.FFN,
        CDS=rules.preprocess.output,
        installed=os.path.join(RESULTS_DIR, "gRodon/gRodon.installed")
    output:
        PRED=os.path.join(RESULTS_DIR, "gRodon/{ass}_growth_prediction.txt")
    log:
        "logs/gRodon.{ass}.log"
    conda:
        os.path.join(ENV_DIR, "gRodon.yaml")
    message:
        "Growth prediction using gRodon for {wildcards.ass}"
    script:
        os.path.join(SRC_DIR, "gRodon.R")
